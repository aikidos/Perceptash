<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Perceptash</name>
    </assembly>
    <members>
        <member name="T:Perceptash.Computers.IImageHashComputer`1">
            <summary>
            Interface used for implementing calculation hash algorithms.
            </summary>
            <typeparam name="THash">Type of hash value.</typeparam>
        </member>
        <member name="M:Perceptash.Computers.IImageHashComputer`1.Compute(System.IO.Stream,Perceptash.Transformers.IImageTransformer)">
            <summary>
            Returns hash of the image.
            </summary>
            <param name="stream">Stream to the image.</param>
            <param name="transformer">Implementation of image conversion methods.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="stream"/> parameter is null.
                The <paramref name="transformer"/> parameter is null.
            </exception>
        </member>
        <member name="T:Perceptash.Computers.ImageAverageHashComputer">
            <summary>
            Implementation of the hash calculation method using average algorithm.
            </summary>
        </member>
        <member name="M:Perceptash.Computers.ImageAverageHashComputer.Compute(System.IO.Stream,Perceptash.Transformers.IImageTransformer)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.Computers.ImageDifferenceHash256Computer">
            <summary>
            Implementation of the 256-bit hash calculation method using difference hash.
            See http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="M:Perceptash.Computers.ImageDifferenceHash256Computer.Compute(System.IO.Stream,Perceptash.Transformers.IImageTransformer)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.Computers.ImageDifferenceHash64Computer">
            <summary>
            Implementation of the 64-bit hash calculation method using difference hash.
            See http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="M:Perceptash.Computers.ImageDifferenceHash64Computer.Compute(System.IO.Stream,Perceptash.Transformers.IImageTransformer)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.ImageHasherExtensions">
            <summary>
            Helper class for working with implementations <see cref="T:Perceptash.IImageHasher"/>.
            </summary>
        </member>
        <member name="M:Perceptash.ImageHasherExtensions.Calculate``1(Perceptash.IImageHasher,System.String,Perceptash.Computers.IImageHashComputer{``0})">
            <summary>
            Returns hash of the image.
            </summary>
            <typeparam name="THash">Type of hash value.</typeparam>
            <param name="hasher">Implementation of the <see cref="T:Perceptash.IImageHasher"/>.</param>
            <param name="filePath">Path to an image to be hashed.</param>
            <param name="computer">Implementation of the hash calculation algorithm.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="hasher"/> parameter is null.
                The <paramref name="computer"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="filePath"/> parameter is null, empty, or consists only of white-space characters.
            </exception>
            <example>
            <code>
                var hasher = new ImageHasher(transformer);
             
                var hash = hasher.Calculate("cat.jpg", KnownImageHashes.Difference64);
            </code>
            </example>
        </member>
        <member name="T:Perceptash.HammingWeight">
            <summary>
            https://en.wikipedia.org/wiki/Hamming_weight
            </summary>
        </member>
        <member name="T:Perceptash.IImageHashComparable`1">
            <summary>
            Interface used for implementation of hash comparisons.
            </summary>
            <typeparam name="THash">Type of hash value.</typeparam>
        </member>
        <member name="M:Perceptash.IImageHashComparable`1.Similarity(`0)">
            <summary>
            if images are the same it will return 1.0 or 0.0 for completely different images
            </summary>
            <param name="otherHash">The hash to be used for comparison.</param>
            <example>
            <code>
                var hasher = new ImageHasher(transformer);
             
                var hash1 = hasher.Calculate("cat.jpg", KnownImageHashes.Difference64);
                var hash2 = hasher.Calculate("cat_rotated_90_degrees.jpg", KnownImageHashes.Difference64);
             
                float similarity = hash1.Similarity(hash2); // 0.46875
            </code>
            </example>
        </member>
        <member name="T:Perceptash.ImageAverageHash">
            <summary>
            The hash, calculated using the average hash algorithm.
            </summary>
        </member>
        <member name="P:Perceptash.ImageAverageHash.InternalValue">
            <summary>
            Gets the hash value.
            </summary>
        </member>
        <member name="M:Perceptash.ImageAverageHash.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:Perceptash.ImageAverageHash"/>.
            </summary>
            <param name="value">Hash value.</param>
        </member>
        <member name="M:Perceptash.ImageAverageHash.Similarity(Perceptash.ImageAverageHash)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.ImageDifferenceHash256">
            <summary>
            The 256-bit hash, calculated using http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="M:Perceptash.ImageDifferenceHash256.#ctor(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Initializes a new <see cref="T:Perceptash.ImageDifferenceHash256"/>.
            </summary>
            <param name="values">Hash values.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="values"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                The length of the <paramref name="values"/> is not four.
            </exception>
        </member>
        <member name="M:Perceptash.ImageDifferenceHash256.GetInternalValuesSpan">
            <summary>
            Returns hash as a span of values.
            </summary>
        </member>
        <member name="M:Perceptash.ImageDifferenceHash256.Similarity(Perceptash.ImageDifferenceHash256)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.ImageDifferenceHash64">
            <summary>
            The 64-bit hash, calculated using http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="P:Perceptash.ImageDifferenceHash64.InternalValue">
            <summary>
            Gets the hash value.
            </summary>
        </member>
        <member name="M:Perceptash.ImageDifferenceHash64.#ctor(System.UInt64)">
            <summary>
            Initializes a new <see cref="T:Perceptash.ImageDifferenceHash64"/>.
            </summary>
            <param name="value">Hash value.</param>
        </member>
        <member name="M:Perceptash.ImageDifferenceHash64.Similarity(Perceptash.ImageDifferenceHash64)">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.IImageHasher">
            <summary>
            Interface used for implementing calculation hash methods.
            </summary>
        </member>
        <member name="P:Perceptash.IImageHasher.Transformer">
            <summary>
            Gets the implementation of the image conversion methods.
            </summary>
        </member>
        <member name="M:Perceptash.IImageHasher.Calculate``1(System.IO.Stream,Perceptash.Computers.IImageHashComputer{``0})">
            <summary>
            Returns hash of the image.
            </summary>
            <typeparam name="THash">Type of hash value.</typeparam>
            <param name="stream">Stream to the image.</param>
            <param name="computer">Implementation of the hash calculation algorithm.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="stream"/> parameter is null.
                The <paramref name="computer"/> parameter is null.
            </exception>
            <example>
            <code>
                var hasher = new ImageHasher(transformer);
             
                using var stream = File.OpenRead("cat.jpg");
             
                var hash = hasher.Calculate(stream, KnownImageHashes.Difference64);     
            </code>
            </example>
        </member>
        <member name="T:Perceptash.ImageHasher">
            <summary>
            Implementation of the hash calculation methods.
            </summary>
        </member>
        <member name="P:Perceptash.ImageHasher.Transformer">
            <inheritdoc />
        </member>
        <member name="M:Perceptash.ImageHasher.#ctor(Perceptash.Transformers.IImageTransformer)">
            <summary>
            Initializes a new <see cref="T:Perceptash.ImageHasher"/>.
            </summary>
            <param name="transformer">Implementation of the image conversion methods.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="transformer"/> parameter is null.
            </exception>
        </member>
        <member name="M:Perceptash.ImageHasher.Calculate``1(System.IO.Stream,Perceptash.Computers.IImageHashComputer{``0})">
            <inheritdoc />
        </member>
        <member name="T:Perceptash.KnownImageHashes">
            <summary>
            Contains reusable static instances of known calculation hash algorithms.
            </summary>
        </member>
        <member name="P:Perceptash.KnownImageHashes.Difference64">
            <summary>
            Implementation of the 64-bit hash calculation method using difference hash.
            See http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="P:Perceptash.KnownImageHashes.Difference256">
            <summary>
            Implementation of the 256-bit hash calculation method using difference hash.
            See http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
            </summary>
        </member>
        <member name="P:Perceptash.KnownImageHashes.Average">
            <summary>
            Implementation of the hash calculation method using average algorithm.
            </summary>
        </member>
        <member name="T:Perceptash.Transformers.IImageTransformer">
            <summary>
            Interface used for implementing image conversion methods.
            </summary>
        </member>
        <member name="M:Perceptash.Transformers.IImageTransformer.ConvertToGreyscaleAndResize(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Converts an image to grayscale, resizes it and returns resulting array of bytes.
            </summary>
            <param name="stream">Stream to the image.</param>
            <param name="width">New image width.</param>
            <param name="height">New image height.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="stream"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The <paramref name="width"/> parameter is less than or equal to zero.
                The <paramref name="height"/> parameter is less than or equal to zero.
            </exception>
        </member>
    </members>
</doc>
